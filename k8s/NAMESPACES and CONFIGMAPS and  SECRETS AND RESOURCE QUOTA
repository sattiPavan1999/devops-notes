NAMESPACES and CONFIGMAPS

* Basically when we create a pod, it will be created in a default namespace

kubectl get ns
(List of namespaces)

kubectl run pod-1 --image=nginx
(Create a pod)

kubectl describe pod pod-1
(We can see it is created in default namespace)

* We can create a namespace in two ways
1. Imperative 
2. Declarative


1. Imperative

kubectl create ns dev-namespace
(create a namespace)

kubectl get ns
(List of namespaces)
2. Declarative

   20  vim namespace.yml
(
---
apiVersion: v1
kind: Namespace
metadata:
  name: test-namespace
)

   21  kubectl create -f namespace.yml
	(create a namespace)

   22  kubectl get ns
	(List of namespaces)


Imperative

   25  kubectl get po

   26  kubectl run pod-2 --image=nginx -n dev-namespace
	 (create a pod in dev-namespace)

   27  kubectl get po -n dev-namespace
	 (list of pods in dev-namespace)


Declarative
   28  vim pod.yml
(
---
apiVersion: v1
kind: Pod
metadata:
  name: pod-4
  namespace: test-namespace
spec:
  containers:
    - name: mycontainer4
      image: nginx
      ports:
        - containerPort: 80
)

   29  kubectl create -f pod.yml
	 (create a pod in test-namespace)

   30  kubectl get po -n test-namespace
	 (list of pods in test-namespace)

   31  vim pod.yml
(
---
apiVersion: v1
kind: Pod
metadata:
  name: pod-4
spec:
  containers:
    - name: mycontainer4
      image: nginx
      ports:
        - containerPort: 80
)

   32  kubectl create -f pod.yml -n test-namespace
	 (create a pod using manifest file but giving the namespace in command)

   33  kubectl create -f pod.yml -n dev-namespace
	 (create a pod using manifest file but giving the namespace in command)

   34  kubectl get po -n dev-namespace
	 (list of pods in dev-namespace)


   
   37  vim deployment.yml
(
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
)
(Took it from official doc)

   38  kubectl create -f deployment.yml -n dev-namespace
        (created this deployment in dev-namespace)
   39  kubectl create -f deployment.yml -n test-namespace
        (created this deployment in test-namespace)

   40  kubectl config view | grep -i "namespace"
        (To ckeck , in which namespace we are in)

   42  kubectl config set-context --current --namespace=dev-namespace
        (To go into the dev-namespace)

   43  kubectl config view | grep -i "namespace"
        (To ckeck , in which namespace we are in)

   44  kubectl run pod-5 --image=httpd
        (create a namespace)
        (It will be created in dev-namespace)

   45  kubectl get pod
        (list of pods)
        (list of pods in dev-namespace)
    
   47  kubectl get all -n test-namespace
        (To see what are all there in test-namespace)

kubectl delete ns test-namespace (command for deleting ns)
(NOTE: we should not delete namespace directly. First we should delete all the services inside that namespace after we should delete the namespace )

CONFIGMAPS
* We should not put secrets or credentials in this

   51  kubectl config set-context --current --namespace=default
        (selet a namespace where you want to create configmap)

DECLARATIVE

   52  vim configmap.yml
(
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-1
data:
  PORT: "3306"
  DB_NAME: "flm-db"
  COURSE: "devops"
  Cloud: "AWS"
)

   53  kubectl create -f configmap.yml
        (create configmap.yml)

   54  kubectl get cm
        (list of cm)

   55  kubectl describe cm cm-1
        (get the full details for specific cm)

IMPERATIVE

   58  kubectl create cm cm-2 --from-literal="Name=Mustafa" --from-literal="Company=flm"
        (create a cm by giving values in this command)
        
   59  kubectl get cm
        (list of cm)

We can create a .env file and pass this to configmap
We create a confgmap to attach it to pod



   62  vim app.env
(
app=swiggy
env=dev
)

   63  kubectl create cm cm-3 --from-env-file=app.env
        (create a cm using app.env file)

   64  kubectl describe cm cm-3
        (full details of cm-3)

   65  kubectl get cm
        (list of cm)

Possible ways to attach a configmap to a pod
1. Attach complete cm to a pod
2. Attach multiple cm
3. Attach specific values from cm to pod
4. Attach diff values from diff cm to pod
 
   68  vim pod.yml
(
---
apiVersion: v1
kind: Pod
metadata:
  name: flm-pod
spec:
  containers:
    - name: mycontainer5
      image: nginx
      ports:
        - containerPort: 80
      envFrom:
        - configMapRef:
            name: cm-1
        - configMapRef:
            name: cm-2
)
(create a pod by giving the configmap names)

   69  kubectl create -f pod.yml
        (create a pod)

   70  kubectl get pod
        (list of pods)

   71  kubectl exec -it flm-pod -- bash
        (Go into the pod to see the env values)
         printenv
         (run this command to see all the values)
         exit
         (To come back to root from the pod)


   74  kubectl delete pod flm-pod
        (delete previous pod)

   75  vim pod.yml
( ---
apiVersion: v1
kind: Pod
metadata:
  name: flm-pod
spec:
  containers:
    - name: mycontainer5
      image: nginx
      ports:
        - containerPort: 80
      env:
        - name: myportenvname
          valueFrom:
            configMapKeyRef:
              name: cm-1
              key: PORT

        - name: mycompanyname
          valueFrom:
            configMapKeyRef:
              name: cm-2
              key: Company )
(give different keys from different cm)

   76  kubectl create -f pod.yml
        
   77  kubectl exec -it flm-pod -- bash
        (Go into the pod to see the env values)
         printenv
         (run this command to see all the values)
         exit
         (To come back to root from the pod)






SECRETS AND RESOURCE QUOTA

SECRETS

DECLARATIVE
    

    1  vim secret.yml
(
---
apiVersion: v1
kind: Secret
metadata:
  name: sec-1
data:
  NAME: "pavan"
  Place: "rjy"
  Company: "flm"
)

    2  kubectl create -f secret.yml          (If we try to create a secret, we will get a error)

    3  echo "pavan" | base64
        (we get encrypted string)
    4  echo "flm" | base64
        (we get encrypted string)
    5  echo "rjy" | base64
        (we get encrypted string)

    6  vim secret.yml
(
---
apiVersion: v1
kind: Secret
metadata:
  name: sec-1
data:
  NAME: "cGF2YW4K"
  Place: "cmp5Cg=="
  Company: "ZmxtCg=="
)
(paste that encrypted strings here)

    7  kubectl create -f secret.yml
        (create a secret)

    8  kubectl get secret
        (list of secrets)

    9  kubectl describe secret sec-1
        (details of the secret)

   11  kubectl get secret sec-1 -o yaml
        (details of the secret)

   12  echo "cGF2YW4K" | base64 -d
        (To decrypt the data)


IMPERATIVE   
(BEST APPROACH)

   15  kubectl create secret generic sec-2 --from-literal=username=mustafa --from-literal=password=admin
        (we can create a secret using command)

   16  kubectl get secret
        (list of secrets)

   17  kubectl get secret sec-2 -o yaml
        (details of secret2)
        (we see only encrypted values)

   19  vim app.env
(
course=devops
year=2025
)

   20  kubectl create secret generic sec3 --from-env-file=app.env
        (create a secret using .env file)

   21  kubectl get secret

   22  kubectl get secret sec3 -o yaml
        (details of a secret)

   23  rm -f app.env
        (remove the app.env file. so no one can see original values)

After creating secret, we need to attach the secret to a pod

1. Attach entire secret

   29  vim pod.yml
(
---
apiVersion: v1
kind: Pod
metadata:
  name: pod-1
spec:
  containers:
    - name: cont-1
      image: nginx
      ports:
        - containerPort: 80
      envFrom:
        - secretRef:
            name: sec-1
        - secretRef:
            name: sec-2
)
   30  kubectl create -f pod.yml
		(create a pod by giving entire secret files)

   34  kubectl exec -it pod-1 -- bash
		(go into the secret)
		printenv
		(run this to see the decrypted values)



2. Attach different Keys from different secret files
    (Home Work)





Resource Quota

   37  kubectl create ns food
	(create a namespace food)

   38  vim resource-quota.yml
(
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: food-rq
  namespace: food
spec:
  hard:
    requests.cpu: "500m"
    limits.cpu: "1000m"
    requests.memory: "50Mi"
    limits.memory: "100Mi"
)
(requests  means minimum and limits means maximum)
(1000m means 1 cpu)

   39  kubectl create -f resource-quota.yml 
	(create the resource-quota)

   41  kubectl get quota -n food
	(get list of resource-quota in food namespace)

   42  vim pod.yml
(
---
apiVersion: v1
kind: Pod
metadata:
  name: pod-5
  namespace: food
spec:
  containers:
    - name: cont-1
      image: nginx
      ports:
        - containerPort: 80
      resources:
        requests:
          cpu: "50m"
          memory: "10Mi"
        limits:
          cpu: "100m"
          memory: "15Mi"
)
(Create a pod by giving the resources)

   45  kubectl create -f pod.yml
	( create a pod )

   46  kubectl get quota -n food
	(see the quota)

