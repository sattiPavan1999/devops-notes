
Docker Compose

* Docker compose is a tool
* Here we will create a single YML file in which we git multiple container configurations
* If we execute this yml file, all the docker files which we have will be build at a time. So, images and containers will be created at a time 

yum install docker -y && systemctl start docker
(Install and run docker)

vim docker-compose.sh
(
# Download the current stable release of Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# Apply executable permissions
sudo chmod +x /usr/local/bin/docker-compose
# Create a symbolic link
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

# Install using pip (Python package manager)
sudo yum install -y python3-pip
sudo pip3 install docker-compose

#check version
docker-compose --version
)

sh docker-compose.sh
(Install docker compose tool)

docker-compose version
(Check if it is installed or not)


vim compose.yml or vim compose.yaml or docker-compose.yml or docker-compose.yaml
(Only these will be supported)


vim compose.yml
(
---
version: "3"
services:
  devops:
    container_name: cont-1
    image: shaikmustafa/dm
    ports:
      - "1234:80"
  cloud:
    container_name: cont-2
    image: shaikmustafa/cycle
    ports:
      - "5678:80"
  amazon:
    container_name: cont-3
    image: shaikmustafa/mygame
    ports:
      - "1122:80"
)


docker-compose up -d
(It will execute the docker-compose file)

docker ps
(To check all the containers)

docker-compose down
(To delete the containers created using docker-compose)

docker-compose stop
(to change the container state to exit)

docker-compose start
(to change the container state to start)

docker-compose config
(To see the configurations)

docker-compose images
(To see the images which are created using docker-compose)

docker-compose ps
(To see the containers which are created using docker-compose)

docker stop cont-1
(To stop single container)
docker start cont-1
(To start single container)
docker rm cont-1
(To delete single container)

docker logs cont-1
(To checks the logs of a specific container)

docker-compose logs
(To get the logs of all the containers which are created by docker-compose)

docker-compose pause
(To pause the containers, So users cant perform any actions)

docker-compose unpause
(To unpause the containers)


mkdir swiggy

cd swiggy

mkdir instamart food

vim food/index.html
(
<h1>This is food</h1>
)

vim instamart/index.html
(
<h1>This is Instamart</h1>
)

vim food/Dockerfile
(
FROM nginx:stable-alpine
COPY . /usr/share/nginx/html/
)

vim instamart/Dockerfile
(
FROM nginx:stable-alpine
COPY . /usr/share/nginx/html/
)

vim docker-compose.yml
(
---
version: "3"
services:
  food:
    container_name: foodcontainer
    build: ./food/
    ports:
      - "1234:80"

  instamart:
    container_name: instamartcontainer
    build: ./instamart/
    ports:
      - "5678:80"
)


(NOTE: here it will create both image and container)


docker-compose up -d






1 yum install git docker -y && systemctl start docker
        (install git, docker and start docker)
    2  vim docker-compose.sh
        (include commands to install for docker-compose)
    3  sh docker-compose.sh
        (install docker-compose)
    4  docker-compose version
        (check if it is installed or not)
    5  git clone https://github.com/devops0014/compose.git
        (clone repo)
    6  ls
    7  cd compose/
        (get inside repo)
    8  ls
    9  cd paytm/
        (get inside paytm folder)
   15  ls
   16  vim compose.yml
        (
            ---
                version: "3"
                services:
                  bus:
                    container_name: bus-container
                    build: ./bus-tickets/
                    ports:
                      - "1111:80"
                    volumes:
                      - bus-volume:/usr/share/nginx/html/
                
                  train:
                    container_name: train-container
                    build: ./train-tickets/
                    ports:
                      - "2222:80"
                    volumes:
                      - train-volume:/usr/share/nginx/html/
                   
                   movie:
                    container_name: movie-container
                    build: ./movie-tickets/
                    ports:
                      - "3333:80"
                    volumes:
                      - movie-volume:/usr/share/nginx/html/
                
                volumes:
                  bus-volume:
                  train-volume:
                  movie-volume:      
        )
   17  docker-compose up -d
        (execute this yml file to create images and containers at a time and create volumes as well)
   18  docker images
   19  docker ps
   20  ls
   21  docker volume ls
        (see volumes)
   22  cd /var/lib/docker/volumes/paytm_train-volume/_data
        (go to this path to edit the index file to see changes in UI)
   29  ls
   30  vim index.html
        (Do some changes)
      (Now refresh the UI)



     1  docker-compose down
        (It will remove all the containers and volumes which are created previously )
    6  vim compose.yml 
       (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - train-network
            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
    7  docker-compose up -d
    8  docker network ls
       (see list of netwoks)
    9  docker ps
   10  docker inspect movie-container | grep -i "Network"
       (To check the container to be in which network)â€¨





  18. vim compose.yml 
        (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
   19  docker-compose up -d
        (build again)
   22  docker ps
   23  docker inspect bus-container
        (copy any container IP address)
   24  docker exec -it movie-container bash
        (go inside the container to check wether the container which we copied IP address is communicationg with this container or not)
        *  1  apt update -y
            2  apt install iputils-ping -y
            3  exit
            4  ping 172.23.0.4
            5  exit





18. vim compose.yml 
        (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
              environment:
                - DB_ENDPINT="https://abc.com:3306/"
                - DB_USER=root

            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
   19  docker-compose up -d
        (build again)
   24  docker exec -it train-container bash
            * printenv
                (run this to print the env that we given in compose file)



         ANOTHER WAY FOR ENV VARIABLES
    vim .env
    (
        DB_HOST=pavan
          DB_USER=pavan
    )
    
18. vim compose.yml 
        (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
                environment:
                  - DB_HOST_NAME=${DB_HOST}
                  - DB_HOST_USER=${DB_USER}
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network

            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
   19  docker-compose up -d
        (build again)
   24  docker exec -it bus-container bash
            * printenv
                (run this to print the env that we given in compose file)








1  yum install git docker -y && systemctl start docker
    2  vim docker-compose.sh
    3  sh docker-compose.sh
    4  git clone https://github.com/sattiPavan1999/python-library-app.git
    5  ls
    6  cd python-library-app/
    7  ls
    8  git checkout master
    9  ls
   10  cat Dockerfile 
   11  cd database/
   12  ls
   13  cd Dockerfile
   14  vim Dockerfile
   15  cd ../
   16  ll
   17  vim compose.yml
         (
		---
version: "3"
services:
  db:
    container_name: db
    build: ./database/
    ports:
      - "3306:3306"
    volumes:
      - db-volume:/var/lib/mysql
    networks:
      - dbnet
      - mynet

  auth:
    container_name: auth-container
    build: ./auth/
    ports:
      - "5001:5001"
    networks:
      - dbnet
      - mynet
      - appnet

book:
    container_name: book-container
    build: ./book/
    ports:
      - "5002:5002"
    networks:
      - dbnet
      - mynet
      - appnet

  borrow:
    container_name: borrow-container
    build: ./borrow/
    ports:
      - "5003:5003"
    networks:
      - dbnet
      - mynet
      - appnet

app:
    container_name: app-container
    build: .
    ports:
      - "5000:5000"
    networks:
      - appnet
      - mynet

volumes:
  db-volume:

networks:
  dbnet:
  mynet:
  appnet:
         )
   18  docker-compose up -d
   19  docker ps
   20  docker images
   21  cd ../













COMPOSE: used to create multiple services on a single host at a time
SWARM: used to create a single service on a multiple hosts at a time 
STACK: used to create multiple services on multiple hosts at a time


(workers are only to run the applications)
(master has all the permissions like updating, creating, deleting, etc...)


	Initialize 3 servers in ec2 and give names as master, worker-1, worker-2
    1  yum install docker -y && systemctl start docker
	(install in all servers)
    2  docker swarm init
	(run this in master to get token)
	(And paste the token in worker servers)
    3  docker node ls
	(To see the no.of nodes(both master and worker nodes))
    4  docker service create --name swarm-service-1 --publish 1111:80 shaikmustafa/dm
	(To create a service in all the nodes)

(NOTE: we should always take the image from docker hub. Not from our local server)


    5  docker service ls
	(To get list of services)
    6  docker service ps swarm-service-1
	(To get the details of a particular service)
    7  docker ps
	(To see list of containers)
	(In this example, we can see one container in master but we can't see in worker nodes but application we can access from worker nodes)
    
    8  docker service rm swarm-service-1
	(If I want to delete the service)
	(Then we can't access the application)


	
   20  docker service create --name service-2 --replicas 6 --publish 2222:80 shaikmustafa/cycle
	(If I want to create multiple containers for a single service)
   21  docker service ls
   22  docker service ps service-2
	(we will get the list of services which are created in which nodes)
	(In this example we will get list of 6)
   23  docker ps
	(we will get list of containers in this master node)
	(We can run this command to see list of containers in worker nodes also)


(NOTE: we won't get port conflict because here we created port for service not for containers)


   27  docker service scale service-2=15
	(To scale up the containers)
   28  docker service ps service-2
	(we can see where the containers are created)
   29  docker service scale service-2=3
	(To scale down the containers)
   30  docker service ps service-2


   31  docker rm -f service-2.2.ffrle547stnyumzsddwjpp4ih
	(Command to delete a container)
	(IF any container is removed or deleted, then other container will be created automatically)
	(Self healing feature is there in swarm)
   32  docker ps
	(we can see new container is created)

 
   33  docker service update --image shaikmustafa/dm service-2
	(To update the image of the container)
	(In this example, we are previously using shaikmustafa/cycle image. But now we updated to shaikmustafa/dm image)



9  docker service rollback service-2
	(we can rollback to previous image in this service)
    10  docker service inspect service-2
	(To know all the details of the service)

* If you want to create a new server and add this server to master server then
  
   docker swarm join-token worker
   (run this in master node and copy and paste this token in new worker node to attach this to master node) 
   (I want add a new worker node, so I am running this)
   or 
   docker swarm join-token manager
	

* If master want to remove the worker, he can't do it directly
  because first we need to run the leave command in worker and then master can remove the worker
  worker :
     docker swarm leave

  master:
      docker node ls
      (list of nodes with their IDs)

      docker node rm bam9fy2uz1dm2snpng261057d

(Note: if we remove the node from the cluster then the containers of this removed node will go to other random nodes automatically)


(Note: we can have multiple masters also)
      








DOCKER COMPOSE NEW CONCEPTS
* we can create multiple containers through docker compose

    1  yum install docker -y && systemctl start docker
	(install and start docker)
    
    2  vim docker-compose.sh
       (
       # Download the current stable release of Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# Apply executable permissions
sudo chmod +x /usr/local/bin/docker-compose
# Create a symbolic link
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

# Install using pip (Python package manager)
sudo yum install -y python3-pip
sudo pip3 install docker-compose

#check version
docker-compose --version

	)

    3  sh docker-compose.sh
	(install docker compose tool)

4  vim compose.yml
	(
	 ---
version: "3"
services:
  flm:
    image: shaikmustafa/cycle
    deploy:
      replicas: 5
    ports:
      - "80"

  devops:
    image: httpd
    deploy:
      replicas: 3
    ports:
      - "80"

	)
    5  docker-compose up -d
       (run this to create containers) 

    7  docker ps
	(list of containers)

    8  docker rm -f root_devops_2
	(If we remove the container then it wont be created again because it don't have self healing feature)
    9  docker ps


   26  docker-compose up --scale devops=10 --scale flm=10 -d
	(If you want to scale up or down, give both the service names and list of containers to be created)
   27  docker ps

* another simple approach is
  
 	vim compose.yml
	(
		---
version: "3"
services:
  flm:
    image: shaikmustafa/cycle
    deploy:
      replicas: 1
    ports:
      - "80"

  devops:
    image: httpd
    deploy:
      replicas: 1
    ports:
      - "80"

	)

(edit this compose.yml file)

        docker-compose up -d
        (and run again)






REVERSE PROXY

    1  yum install git -y
    3  git clone https://github.com/devops0014/nginx-reverse-proxy.git
    4  ls
    7  cd nginx-reverse-proxy/
    8  ls
   11  git checkout master
   12  ls
   20  docker-compose up -d
	(run this command to create a container)
   21  vim docker-compose.yml
   22  cd nginx/
   23  ls
   24  vim nginx.conf
	(change the weight or traffic)
   27  docker-compose build
	(build before creating the container so the changes will be there)
   28  docker-compose up -d





DOCKER STACK

   38  docker swarm init
       (genatare a token and paste in the worker nodes)
   39  docker node ls
   40  vim compose.yml
   45  docker stack deploy paytm --compose-file=compose.yml
	(To create a stack)
   46  docker service ls
   49  docker stack ls
   50  docker stack ps Paytm
	(details of a specific stack)
   51  docker ps
   52  docker rm -f root_devops_1
	(remove one container, so another container will be created)
   53  docker ps
   54  docker stack rm Paytm
	(To remove the stack)


