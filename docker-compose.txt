
Docker Compose

* Docker compose is a tool
* Here we will create a single YML file in which we git multiple container configurations
* If we execute this yml file, all the docker files which we have will be build at a time. So, images and containers will be created at a time 

yum install docker -y && systemctl start docker
(Install and run docker)

vim docker-compose.sh
(
# Download the current stable release of Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# Apply executable permissions
sudo chmod +x /usr/local/bin/docker-compose
# Create a symbolic link
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

# Install using pip (Python package manager)
sudo yum install -y python3-pip
sudo pip3 install docker-compose

#check version
docker-compose --version
)

sh docker-compose.sh
(Install docker compose tool)

docker-compose version
(Check if it is installed or not)


vim compose.yml or vim compose.yaml or docker-compose.yml or docker-compose.yaml
(Only these will be supported)


vim compose.yml
(
---
version: "3"
services:
  devops:
    container_name: cont-1
    image: shaikmustafa/dm
    ports:
      - "1234:80"
  cloud:
    container_name: cont-2
    image: shaikmustafa/cycle
    ports:
      - "5678:80"
  amazon:
    container_name: cont-3
    image: shaikmustafa/mygame
    ports:
      - "1122:80"
)


docker-compose up -d
(It will execute the docker-compose file)

docker ps
(To check all the containers)

docker-compose down
(To delete the containers created using docker-compose)

docker-compose stop
(to change the container state to exit)

docker-compose start
(to change the container state to start)

docker-compose config
(To see the configurations)

docker-compose images
(To see the images which are created using docker-compose)

docker-compose ps
(To see the containers which are created using docker-compose)

docker stop cont-1
(To stop single container)
docker start cont-1
(To start single container)
docker rm cont-1
(To delete single container)

docker logs cont-1
(To checks the logs of a specific container)

docker-compose logs
(To get the logs of all the containers which are created by docker-compose)

docker-compose pause
(To pause the containers, So users cant perform any actions)

docker-compose unpause
(To unpause the containers)


mkdir swiggy

cd swiggy

mkdir instamart food

vim food/index.html
(
<h1>This is food</h1>
)

vim instamart/index.html
(
<h1>This is Instamart</h1>
)

vim food/Dockerfile
(
FROM nginx:stable-alpine
COPY . /usr/share/nginx/html/
)

vim instamart/Dockerfile
(
FROM nginx:stable-alpine
COPY . /usr/share/nginx/html/
)

vim docker-compose.yml
(
---
version: "3"
services:
  food:
    container_name: foodcontainer
    build: ./food/
    ports:
      - "1234:80"

  instamart:
    container_name: instamartcontainer
    build: ./instamart/
    ports:
      - "5678:80"
)


(NOTE: here it will create both image and container)


docker-compose up -d






1 yum install git docker -y && systemctl start docker
        (install git, docker and start docker)
    2  vim docker-compose.sh
        (include commands to install for docker-compose)
    3  sh docker-compose.sh
        (install docker-compose)
    4  docker-compose version
        (check if it is installed or not)
    5  git clone https://github.com/devops0014/compose.git
        (clone repo)
    6  ls
    7  cd compose/
        (get inside repo)
    8  ls
    9  cd paytm/
        (get inside paytm folder)
   15  ls
   16  vim compose.yml
        (
            ---
                version: "3"
                services:
                  bus:
                    container_name: bus-container
                    build: ./bus-tickets/
                    ports:
                      - "1111:80"
                    volumes:
                      - bus-volume:/usr/share/nginx/html/
                
                  train:
                    container_name: train-container
                    build: ./train-tickets/
                    ports:
                      - "2222:80"
                    volumes:
                      - train-volume:/usr/share/nginx/html/
                   
                   movie:
                    container_name: movie-container
                    build: ./movie-tickets/
                    ports:
                      - "3333:80"
                    volumes:
                      - movie-volume:/usr/share/nginx/html/
                
                volumes:
                  bus-volume:
                  train-volume:
                  movie-volume:      
        )
   17  docker-compose up -d
        (execute this yml file to create images and containers at a time and create volumes as well)
   18  docker images
   19  docker ps
   20  ls
   21  docker volume ls
        (see volumes)
   22  cd /var/lib/docker/volumes/paytm_train-volume/_data
        (go to this path to edit the index file to see changes in UI)
   29  ls
   30  vim index.html
        (Do some changes)
      (Now refresh the UI)



     1  docker-compose down
        (It will remove all the containers and volumes which are created previously )
    6  vim compose.yml 
       (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - train-network
            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
    7  docker-compose up -d
    8  docker network ls
       (see list of netwoks)
    9  docker ps
   10  docker inspect movie-container | grep -i "Network"
       (To check the container to be in which network)â€¨





  18. vim compose.yml 
        (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
   19  docker-compose up -d
        (build again)
   22  docker ps
   23  docker inspect bus-container
        (copy any container IP address)
   24  docker exec -it movie-container bash
        (go inside the container to check wether the container which we copied IP address is communicationg with this container or not)
        *  1  apt update -y
            2  apt install iputils-ping -y
            3  exit
            4  ping 172.23.0.4
            5  exit





18. vim compose.yml 
        (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
              environment:
                - DB_ENDPINT="https://abc.com:3306/"
                - DB_USER=root

            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
   19  docker-compose up -d
        (build again)
   24  docker exec -it train-container bash
            * printenv
                (run this to print the env that we given in compose file)



         ANOTHER WAY FOR ENV VARIABLES
    vim .env
    (
        DB_HOST=pavan
          DB_USER=pavan
    )
    
18. vim compose.yml 
        (
         ---
            version: "3"
            services:
              bus:
                container_name: bus-container
                build: ./bus-tickets/
                ports:
                  - "1111:80"
                volumes:
                  - bus-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
                environment:
                  - DB_HOST_NAME=${DB_HOST}
                  - DB_HOST_USER=${DB_USER}
            
              train:
                container_name: train-container
                build: ./train-tickets/
                ports:
                  - "2222:80"
                volumes:
                  - train-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network

            movie:
                container_name: movie-container
                build: ./movie-tickets/
                ports:
                  - "3333:80"
                volumes:
                  - movie-volume:/usr/share/nginx/html/
                networks:
                  - bus-network
                  - train-network
                  - movie-network
            
            volumes:
              bus-volume:
              train-volume:
              movie-volume:
            
            networks:
              bus-network:
              train-network:
              movie-network:

       )
   19  docker-compose up -d
        (build again)
   24  docker exec -it bus-container bash
            * printenv
                (run this to print the env that we given in compose file)








1  yum install git docker -y && systemctl start docker
    2  vim docker-compose.sh
    3  sh docker-compose.sh
    4  git clone https://github.com/sattiPavan1999/python-library-app.git
    5  ls
    6  cd python-library-app/
    7  ls
    8  git checkout master
    9  ls
   10  cat Dockerfile 
   11  cd database/
   12  ls
   13  cd Dockerfile
   14  vim Dockerfile
   15  cd ../
   16  ll
   17  vim compose.yml
         (
		---
version: "3"
services:
  db:
    container_name: db
    build: ./database/
    ports:
      - "3306:3306"
    volumes:
      - db-volume:/var/lib/mysql
    networks:
      - dbnet
      - mynet

  auth:
    container_name: auth-container
    build: ./auth/
    ports:
      - "5001:5001"
    networks:
      - dbnet
      - mynet
      - appnet

book:
    container_name: book-container
    build: ./book/
    ports:
      - "5002:5002"
    networks:
      - dbnet
      - mynet
      - appnet

  borrow:
    container_name: borrow-container
    build: ./borrow/
    ports:
      - "5003:5003"
    networks:
      - dbnet
      - mynet
      - appnet

app:
    container_name: app-container
    build: .
    ports:
      - "5000:5000"
    networks:
      - appnet
      - mynet

volumes:
  db-volume:

networks:
  dbnet:
  mynet:
  appnet:
         )
   18  docker-compose up -d
   19  docker ps
   20  docker images
   21  cd ../
