 DOCKER

sudo -i

yum install docker -y && systemctl start docker

docker images
(To see list of images)

docker ps
(To see the containers)

touch pavan.txt

vim Dockerfile
(
1.
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
COPY sai.txt .
(Syntax: copy source destination)

2.
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
ADD https://dlcdn.apache.org/airflow/KEYS /opt
)


docker build -t myfirstimage .
(To build an image)

docker run -itd --name NAMEOFACONTAINER IMAGEID/IMAGENAME
(To create a container)

docker exec -it NAMEOFACONTAINER bash
(To go inside the container)






docker build -t mythirdimage:tag1 .
(We are giving tags also here with existing image name)

vim Dockerfile
(
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
ADD https://dlcdn.apache.org/airflow/KEYS .
WORKDIR /pavan/folder/
COPY pavan.txt .
)
(Pavan.txt will be saved in our defined path but internet file will be saved in default path)

docker run -itd --name container-4 mythirdimage:tag1




vim Dockerfile
(
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
ADD https://dlcdn.apache.org/airflow/KEYS .
WORKDIR /pavan/folder/
COPY pavan.txt .
RUN touch newfile.txt
RUN apt update -y
RUN apt install git -y
CMD apt install maven -y
)
(RUN commands will run only when we are building the image)
(CMD command will run only when we are building the Container.
We can see the logs with this command
docker run --name CONTAINERNAME IMAGEID/IMAGENAME)



docker ps -a (get all the containers which are active and exited or down containers)


vim Dockerfile
(
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
ADD https://dlcdn.apache.org/airflow/KEYS .
WORKDIR /pavan/folder/
COPY pavan.txt .
RUN touch newfile.txt
RUN apt update -y
RUN apt install tree -y
ENTRYPOINT ["apt", "install", "-y"]
CMD ["docker.io"]
)
(Entrypoint is constant, but CMD value can vary)




vim Dockerfile
(
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
ADD https://dlcdn.apache.org/airflow/KEYS .
WORKDIR /pavan/folder/
COPY pavan.txt .
RUN touch newfile.txt
RUN apt update -y
RUN apt install tree -y
ENTRYPOINT ["apt", "install", “git”, "-y"]
CMD ["docker.io"]
)
(In this case only git is installed in container because ENTRYPOINT is the first priority)




vim Dockerfile
(
FROM ubuntu
MAINTAINER name pavan
LABEL this is my first dockerfile
ADD https://dlcdn.apache.org/airflow/KEYS .
WORKDIR /pavan/folder/
COPY pavan.txt .
RUN touch newfile.txt
EXPOSE 80
ENV name=raviteja
ARG course=devops
RUN echo "hello $name, are you learning $course"
)

(We can access the ENV values, but not ARG values in the container)

printenv
(Used to see env values or variable in the container)










vim Dockerfile
(
FROM httpd
MAINTAINER name pavan
LABEL THIS IS MY HTML FILE
EXPOSE 80
COPY . /usr/local/apache2/htdocs/
)

docker build -t image-1:v1 .

docker run -itd --name container-1 -p 1234:80 image-1:v1





yum install git -y

git clone https://github.com/sattiPavan1999/one.git

cd one

git checkout master

rm -rf Dockerfile script.js  styles.css  tomcat-users.xml

vim maven.sh

Install maven on server

* sudo yum install java-17-amazon-corretto -y
* cd /opt
* wget https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.tar.gz
* sudo tar -xzf apache-maven-3.9.11-bin.tar.gz
* sudo mv apache-maven-3.9.11 maven
* echo 'export M2_HOME=/opt/maven' | sudo tee -a /etc/profile.d/maven.sh
* echo 'export PATH=${M2_HOME}/bin:${PATH}' | sudo tee -a /etc/profile.d/maven.sh
* sudo chmod +x /etc/profile.d/maven.sh
* source /etc/profile.d/maven.sh
* mvn -version
* mvn clean package

sh maven.sh

mvn -v


vim Dockerfile
(
FROM tomcat:8.0.20-jre8
EXPOSE 8080
COPY tomcat-users.xml /usr/local/tomcat/conf/
COPY target/*.war /usr/local/tomcat/webapps/
)


docker build -t image-2:v2 .

docker run -itd --name container-4 -p 1133:8080 image-2:v2





FOR MYSQL



vim Dockerfile
(
FROM mysql/mysql-server:5.7
ENV MYSQL_ROOT_PASSWORD=admin@123
ENV MYSQL_USER=root
EXPOSE 3306
)

docker build -t db-image:v1 .

docker run -d --name container-db -p 1432:3306 db-image:v1

docker exec -it container-db-1 bash

mysql -u root -p
(If you want to go inside database)






Push the image to docker hub



docker login

Username: pavanreddy1999
Password: Sattipavan@143

docker images

docker tag image-2:v2 pavanreddy1999/myfirstimagerepo:tag1

docker push pavanreddy1999/myfirstimagerepo:tag1





docker pull pavanreddy1999/myfirstimagerepo:tag1
(If you want to use this image)





To decrease the size of the image is  1. Multistage docker
2. Instead of using multiple run use single RUN  (Ex. RUN yum install git maven tree -y && npm install)
3. Using .dockerignore (If there are 100 file and we want only 90 files to be sent into container then we can place those 10 files in .dockerignore)



Node application along with multistaging

vim Dockerfile(

FROM node:19-alpine AS stage-1
WORKDIR /flm
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 80

FROM stage-1 AS stage-2
RUN npm install --production
COPY . .
CMD ["node", "index.js"]

) (2 stages are there so we can see less size for the image)

docker build -t image:v2 .

docker run -itd --name mycontainer2 -p 1001:80 image:v2




trivy 
Install trivy

curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.41.0

trivy -v
(Check version)

trivy image firstimage:v2
(Scan image)

docker rmi firstimage:v3
(TO REMOVE IMAGE)

docker stop container1
(TO STOP THE CONTAINER)

docker rm conatiner1
(TO REMOVE THE CONTAINER)

docker rmi firstimage:v2
(AFTER REMOVING THE CONTAINER ONLY WE CAN REMOVE THE REFERENCED IMAGE)

docker system df
(TO CHECK THE CACHE SIZE OCCUPIED)

docker system prune
(TO CLEAR ALL THE MEMORY IN CACHE)


Because of choosing the right image, we can get very few vulnerabilities.
If we take wrong image, we will get so many vulnerabilities
Alpine images are very safe and secure and light weight also


We can search for a specific issue that we got from trivy scan of images
https://avd.aquasec.com/
We can copy the id from trivy and search for it in this aquasec database website


trivy image image:v1 >> report.txt
(We can create a report of these vulnerabilities and share this to developers)

trivy image pavanreddy1999/myfirstimagerepo:tag1
(We can scan for a image which is in docker hub)




Networks

docker inspect container1
(If you want to know the full information about the container like ip-address, etc…)

Every ip address  will be created sequentially 
We will get three types networks like bridge, host, none by default

Bridge network
Whenever we create a container in docker then this container is created on this bridge network because the default network is bridge.

Host network
The container will get the ip address from the host (in our case the host is ec2)

docker run -itd --name container3 -p 1133:80 --network host nginx
(We are specifying the network should be in host network and nginx is the image)
(If we inspect this container we will not see any ip address because it is same as host )
(If we try to access through	 the host ip address we can access the nginx application)

None network

docker run -itd --name container4 -p 1144:80 --network none nginx

(If we inspect this container we will not see any ip address because it is a none network )
(If we try to access through	 the host ip address we can’t access the nginx application because it is none network)



docker run -itd --name container1 -p 1234:80 nginx
(Bridge network)
(We can access through ip-address:1234)

docker run -itd --name container2 --network host shaikmustafa/cycle
(We no need to give the port number here and if given then it will discard the port number)
(Host network)
(We can access through host ip-address)

docker run -itd --name container3 -p 2222:80 --network none shaikmustafa/paytm:bus
(None network)
(We can’t access this because it is in the none network)
(None network won’t going to expose outside)
(It will stay in the server only)
(Generally we use none network for databases)


Custom network

We will create our own networks

docker network create db-network
(Create a custom network)

docker network inspect dev-network
(If we want to know full information about a network)


By default two networks cannot communicate 

docker inspect container1 | grep -i "Ipaddress"
(To know only the IP address)

docker inspect container2 | grep -i "Ipaddress"
(To know only the IP address)

docker exec -it container1 bash
(To go inside the container)

apt update -y
(We cannot install any tool directly inside ubuntu server so first we have to update this)

apt install iputils-ping -y
(Install ping)

ping 172.19.0.2 (ping container2-ipaddress)
(To check container1 and container2 are communicating  or not )

exit 
(To exit from conatiner)



We have to attach container2 ipaddress to container1
And
We have to attach container1 ipaddress to container2
Then those both will communicate 

docker network connect dev-network container2
docker network connect db-network container1
(Now both will communicate)


docker network disconnect db-network container1
(To disconnect the communication )



docker stop $(docker ps -a)
docker rm $(docker ps -a)
(If we want to remove all the containers at a time)

docker rmi $(docker images) (If we want to remove all the images at a time)

docker network
(To see list of network commands)

docker network rm flm
(To remove the fim network)

docker rm -f container2
(Remove container forcefully)
(We no need to run stop command before removing a container here)

docker network prune
(If I want to remove all the empty networks)

docker container prune
(If I want to remove all the exited containers)

docker image prune
(If I want to remove dangling images)

docker rm -f $(docker ps -a)
(To remove all the containers forcefully)

docker rmi $(docker images)
(To remove all the images)

docker system prune
(If we want to remove all the unused components (networks, containers, images, volumes)




